// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //if A instruction-> instructions[15]=0
    //			 instructions[0..14]=address
    //if C instruction-> instructions[15]=1
    //			 instructions[0..2]=jump bits
    //			 instructions[3..5]=destination bits
    //			 instructions[6..12]=comp bits

    // instruction described:    

    //15      12 11...6    5    4    3    2    1    0
    // i  xx  a  ccc ccc  d1   d2   d3   j1   j2   j3
    //store data in:       A    D    M    
    //jump if enter value is __ 0:        <    =    >
    
    // 1- A or C instruction?

   	Not(in=instruction[15], out=isA);
    Not(in=isA, 		out=isC);
    

    // 3- refresh A register data?

	And(a=isC, b=instruction[5], out=ALUtoA);
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=inA);

	Or(a=isA, b=ALUtoA, out=loadA);
	ARegister(in=inA, load=loadA, out=outA);

    // 4- We will use A or M to compute data?

	Mux16(a=outA, b=inM, sel=instruction[12] , out=inALU);


    // 6- refresh D? 
    // ONLY IF its a C instruction we will upload D
    And(a=isC, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=outD);

    // 5- ALU
	ALU(	x =outD,		y =inALU,
		zx=instruction[11],	zy=instruction[9], 
		nx=instruction[10],	ny=instruction[8],
        	f =instruction[7],	no=instruction[6],
        	zr=zr,			ng=ng,
		out=ALUout
	    );

     // 2- write to M ?
    Or16(a=false, b=outA, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=isC, b=instruction[3], out=writeM);

    // 7- jumps
    Or(a=zr, b=ng, out=zeroORneg);
    Not(in=zeroORneg, out=pos);

	And(a=pos, b=instruction[0], out=jgt);
	And(a=zr, b=instruction[1], out=jeq);
	And(a=ng, b=instruction[2], out=jlt);
	
	Or(a=jgt, b=jeq, out=GoE);
	Or(a=GoE, b=jlt, out=jump);
	
	And(a=isC, b=jump, out=loadPC);

    // 7- Is it time to take load a new instruction?
	Not(in=loadPC, out=incrPC);

	PC(in=outA, inc=incrPC, reset=reset, load=loadPC, out[0..14]=pc);
    }