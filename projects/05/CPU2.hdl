// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Instructions described:

    // if A instruction->  instructions[15]    = 0
    //                     instructions[0..14] = address

    // A Instruction
    //  15 14.....0
    //   0  address

    // if C instruction-> instructions[15]    = 1
    //                    instructions[0..2]  = jump bits
    //                    instructions[3..5]  = destination bits
    //                    instructions[6..12] = comp bits

    // C Instruction
    //  15  14 13    12    11 ...  6     5   4   3     2   1   0
    //   i   1  1     A    cc ... cc     d1  d2  d3    j1  j2  j3

    // store data in :                   A   D   M
    // jump if value is ___ 0:                         <   =   >



    // 1 - A or C instruction

    Not( in = instruction[15], out = isA);
    Not( in = isA,             out = isC);



    // 2 - refresh A Register

    And  (  a = isC,         b = instruction[5], out = ALUtoA            ); 
    Mux16(  a = instruction, b = ALUout,         sel = ALUtoA, out = inA );

    Or      ( a  = ALUtoA, b    = isA,   out = Aload                       );
    ARegister( in = inA,    load = Aload, out = outA, out[0..14] = addressM );



    // 3 - Mux: A, inM -> ALU

    Mux16(  a = inM, b = outA, sel = instruction[12], out = inALU );



    // 4 - ALU, executes C instructions

    ALU (   x  = outD,               y  = inALU,
            zx = instruction[11],    zy = instruction[9],
            nx = instruction[10],    ny = instruction[8],
            f  = instruction[7],     no = instruction[6],

            zr = zr,                 ng = ng,

            out = ALUout,            out = outM
        );



    // 5- D Register
    //    only refresh when isC and instr[4]

    And     ( a  = isC,     b   = instruction[4], out = Dload );
    DRegister( in = ALUout, load = Dload,          out = outD  );



    // 6 - write to M?

    And ( a = isC,   b = instruction[3], out        = writeM   );



    // 7 - Jumps

    Or ( a = zr,  b = ng, out = zrng);
    Not( in = zrng,  out = pos);

    And( a = pos, b = instruction[0], out = jgt);
    And( a = zr , b = instruction[1], out = jeq);    
    And( a = ng , b = instruction[2], out = jlt);

    Or ( a = jgt, b = jeq, out = jge);
    Or ( a = jge, b = jlt, out = jump);


    // 8 - PC, Program Counter
    //     Read the next line in the program or go to another?
    //     if we got an instruction like:
    //      1 - @A
    //      2 - 0;JMP
    //     in first line, A register is set
    //     in second line, only if the JMP is satisfacted
    //     the PC goes to the address line
    //     if not, it just goes to the next line, line += 1:

    And( a  = isC,    b   = jump,  out = loadPC );
    Not( in = loadPC, out = incrPC              );

    PC ( in = outA, load = loadPC, inc = incrPC , reset = reset, out[0..14] = pc );


}